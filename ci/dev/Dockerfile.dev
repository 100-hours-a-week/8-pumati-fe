FROM node:20-alpine AS builder

# Sharp와 이미지 처리를 위한 패키지 설치
RUN apk add --no-cache \
    libc6-compat \
    vips-dev \
    build-base \
    python3 \
    make \
    g++

# 작업 디렉토리
WORKDIR /app

# 패키지 매니저 설치
RUN npm install -g pnpm

# 의존성 설치
COPY package.json pnpm-lock.yaml ./
RUN pnpm install

# Sharp를 컨테이너 환경에 맞게 재설치하고 빌드 스크립트 승인
RUN pnpm add sharp
RUN pnpm approve-builds sharp

# .env 파일 복사 (빌드 시점에 환경변수가 필요하므로 소스 복사 전에 먼저 복사)
COPY ./cicd/dev/.env ./.env

# 소스 복사
COPY . .

# .env 파일 확인 (디버깅용)
RUN echo "=== .env 파일 내용 확인 ===" && cat ./.env

# 임시 디렉토리 권한 설정 (이미지 최적화용)
RUN mkdir -p /tmp/next-image-cache && \
    chmod 777 /tmp/next-image-cache

# 빌드 실행 (Next.js가 .env 파일을 자동으로 읽어서 NEXT_PUBLIC_ 변수들을 사용)
RUN pnpm build

# 2단계: 실행용 스테이지
FROM node:20-alpine AS runner

# Sharp와 이미지 처리를 위한 런타임 패키지 설치
RUN apk add --no-cache \
    libc6-compat \
    vips

# pnpm 설치
RUN npm install -g pnpm

WORKDIR /app

# 실행 환경에도 .env 파일 복사
COPY ./cicd/dev/.env ./.env

# 실행에 필요한 의존성만 설치
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --prod

# Sharp를 런타임 환경에 맞게 재설치하고 빌드 스크립트 승인
RUN pnpm add sharp
RUN pnpm approve-builds sharp

# 빌드 결과물 복사
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public

# 임시 디렉토리 권한 설정 (런타임에서도 이미지 최적화용)
RUN mkdir -p /tmp/next-image-cache && \
    chmod 777 /tmp/next-image-cache

# 환경 설정
ENV NODE_ENV=production
ENV HOSTNAME=0.0.0.0
ENV PORT=3000
EXPOSE 3000

# 서버 시작 (Next.js가 자동으로 .env 파일을 읽음)
CMD ["pnpm", "start", "--hostname", "0.0.0.0"]


# FROM node:20-alpine AS builder
# # pnpm 전역 설치
# RUN npm install -g pnpm
# WORKDIR /app

# # .env 파일 복사하고 확인 (기존 수동 배포 스크립트의 3단계와 동일)
# COPY ./cicd/dev/.env ./.env
# RUN cat ./.env  # 환경변수 파일 내용 확인 (디버깅용)

# # package.json과 pnpm-lock.yaml 복사 후 의존성 설치 (기존 스크립트의 5단계와 동일)
# COPY package.json pnpm-lock.yaml ./
# RUN pnpm install --frozen-lockfile

# # 소스 코드 복사 후 빌드 (기존 스크립트의 6단계와 동일)
# COPY . .
# RUN pnpm build

# # 프로덕션 실행 환경 설정
# FROM node:20-alpine AS runner
# RUN npm install -g pnpm
# WORKDIR /app

# # 실행 환경에도 .env 파일 복사
# COPY ./cicd/dev/.env ./.env

# # 프로덕션 의존성만 설치
# COPY package.json pnpm-lock.yaml ./
# RUN pnpm install --prod --frozen-lockfile && \
#     pnpm store prune && \
#     rm -rf ~/.pnpm-store && \
#     rm -rf /root/.pnpm-store && \
#     rm -rf /tmp/* && \
#     npm cache clean --force

# # 빌드된 파일들 복사
# COPY --from=builder /app/.next ./.next
# COPY --from=builder /app/public ./public

# # 환경 변수 설정 (기존 스크립트의 7단계와 동일한 서버 실행 환경)
# ENV NODE_ENV=production
# ENV HOSTNAME=0.0.0.0
# ENV PORT=3000
# EXPOSE 3000

# # 서버 시작 (기존 스크립트의 'pnpm start'와 동일)
# CMD ["pnpm", "start", "--hostname", "0.0.0.0"]