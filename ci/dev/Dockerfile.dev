FROM node:20-alpine AS builder

# 기본 패키지 설치
RUN apk add --no-cache libc6-compat

# 작업 디렉토리
WORKDIR /app

# 패키지 매니저 설치
RUN npm install -g pnpm

# 의존성 설치
COPY package.json pnpm-lock.yaml ./
RUN pnpm install

# .env 파일 복사 (빌드 시점에 환경변수가 필요하므로 소스 복사 전에 먼저 복사)
COPY ./.env ./.env

# 소스 복사
COPY . .

# .env 파일 확인 (디버깅용)
RUN echo "=== .env 파일 내용 확인 ===" && cat ./.env

# 빌드 단계에서 TypeScript 설정 파일 처리 확인
RUN echo "=== Next.js 설정 파일 확인 ===" && \
    ls -la next.config.* && \
    echo "빌드 후 설정 파일 확인:" && \
    ls -la .next/next.config.* 2>/dev/null || echo "빌드된 설정 파일 없음"

# 임시 디렉토리 권한 설정 (이미지 최적화용)
RUN mkdir -p /tmp/next-image-cache && \
    chmod 777 /tmp/next-image-cache

# 빌드 실행 (Next.js가 .env 파일을 자동으로 읽어서 NEXT_PUBLIC_ 변수들을 사용)
RUN pnpm build

# 빌드 후 다시 설정 파일 확인
RUN echo "=== 빌드 완료 후 설정 파일 재확인 ===" && \
    ls -la .next/next.config.* 2>/dev/null || echo "빌드된 설정 파일 여전히 없음" && \
    find .next -name "*config*" -type f

# 2단계: 실행용 스테이지
FROM node:20-alpine AS runner

RUN apk add --no-cache libc6-compat

# pnpm 설치
RUN npm install -g pnpm

WORKDIR /app

# 실행 환경에도 .env 파일 복사
COPY ./.env ./.env

# 실행에 필요한 의존성만 설치
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --prod

# 빌드 결과물 복사
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public

# 실행 단계에서도 설정 파일 확인
RUN echo "=== 실행 단계 설정 파일 확인 ===" && \
    find .next -name "*config*" -type f

# 임시 디렉토리 권한 설정 (런타임에서도 이미지 최적화용)
RUN mkdir -p /tmp/next-image-cache && \
    chmod 777 /tmp/next-image-cache

# 환경 설정
ENV NODE_ENV=production
ENV HOSTNAME=0.0.0.0
ENV PORT=3000
EXPOSE 3000

# 서버 시작 (Next.js가 자동으로 .env 파일을 읽음)
CMD ["pnpm", "start", "--hostname", "0.0.0.0"]
